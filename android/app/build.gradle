apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
import com.android.build.OutputFile

project.ext.react = [
    enableHermes: false,
    bundleInDebug: true,
]
project.ext.envConfigFiles = [
  productiondebug: ".env.production",
  productionrelease: ".env.production",
  developmentrelease: ".env.development",
  developmentdebug: ".env.development",
  stagingrelease: ".env.staging",
  stagingdebug: ".env.staging"
]
apply from: "../../node_modules/react-native/react.gradle"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

def enableSeparateBuildPerCPUArchitecture = false

def enableProguardInReleaseBuilds = false

def jscFlavor = 'org.webkit:android-jsc:+'

def enableHermes = project.ext.react.get("enableHermes", false)

def useIntlJsc = false

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    // compileOptions {
    //     sourceCompatibility JavaVersion.VERSION_1_8
    //     targetCompatibility JavaVersion.VERSION_1_8
    // }

    defaultConfig {
        applicationId "com.bookfacegram"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        vectorDrawables.useSupportLibrary = true
        minSdkVersion 21
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug', 'release']
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "default"
    productFlavors {
        production {}
        staging {
        // We can have build-specific configurations here. Like using applicationIdSuffix to create different package name (ex. ".staging")
        }
        development {}
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}
// repositories {
//   // You can also use jcenter if you prefer
//   mavenCentral() 
// }
dependencies {

   

    implementation fileTree(dir: "libs", include: ["*.jar"])
    //implementation 'com.facebook.fbjni:fbjni-java-only:0.0.4'
    //implementation 'com.facebook.android:facebook-login:[8,9)'
    //implementation 'com.facebook.android:facebook-login:9.+'
    // implementation 'com.facebook.android:facebook-login:5.+'

    
    // Facebook Login only
    //implementation 'com.facebook.android:facebook-login:latest.release'
    /*
    // Facebook Core only (Analytics)
    implementation 'com.facebook.android:facebook-core:latest.release'

    
    // Facebook Share only
    implementation 'com.facebook.android:facebook-share:latest.release'

    // Facebook Messenger only
    implementation 'com.facebook.android:facebook-messenger:latest.release'

    // Facebook App Links only
    implementation 'com.facebook.android:facebook-applinks:latest.release'

    // Facebook Android SDK (everything)
    implementation 'com.facebook.android:facebook-android-sdk:latest.release'
    */
    // implementation('com.facebook.react:react-native:0.65.2') {
    //     exclude group: 'com.facebook.fbjni', module: 'fbjni-java-only'
    //     exclude group: 'com.facebook.yoga', module: 'proguard-annotations'
    // }
    implementation platform('com.google.firebase:firebase-bom:28.4.1')
    //implementation platform('com.google.firebase:firebase-bom:30.0.2')
    implementation project(':react-native-config')
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'com.android.support:multidex:1.0.3'
    implementation group: 'com.kakao.sdk', name: 'usermgmt', version: '1.30.6'
    implementation "com.kakao.sdk:v2-user:2.5.2" // 카카오 로그인
    implementation "com.kakao.sdk:v2-talk:2.5.2" // 친구, 메시지(카카오톡)
    implementation "com.kakao.sdk:v2-story:2.5.2" // 카카오스토리
    implementation "com.kakao.sdk:v2-link:2.5.2" // 메시지(카카오링크)
    implementation "com.kakao.sdk:v2-navi:2.5.2" // 카카오내비
    implementation 'com.facebook.fresco:animated-gif:2.5.0' //GIF사용을위한 라이브러리
    implementation 'com.facebook.fresco:fresco:2.5.0' //GIF사용을위한 라이브러리

    // Declare the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics'

    // Add the SDK for Firebase Cloud Messaging
    implementation 'com.google.firebase:firebase-messaging'

    // debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
    //   exclude group:'com.facebook.fbjni'
    // }

    // debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    //     exclude group:'com.facebook.flipper'
    //     exclude group:'com.squareup.okhttp3', module:'okhttp'
    // }

    // debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
    //     exclude group:'com.facebook.flipper'
    // }

    
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/"
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

     if (useIntlJsc) {
        implementation 'org.webkit:android-jsc-intl:+'
    } else {
        implementation 'org.webkit:android-jsc:+'
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    //from configurations.compile
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

